{"/home/travis/build/npmtest/node-npmtest-assemble/test.js":"/* istanbul instrument in package npmtest_assemble */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-assemble/lib.npmtest_assemble.js":"/* istanbul instrument in package npmtest_assemble */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_assemble = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_assemble = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-assemble/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-assemble && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_assemble */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_assemble\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_assemble.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_assemble.rollup.js'] =\n            local.assetsDict['/assets.npmtest_assemble.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_assemble.__dirname + '/lib.npmtest_assemble.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/index.js":"'use strict';\n\n/**\n * module dependencies\n */\n\nvar path = require('path');\nvar Core = require('assemble-core');\nvar plugins = require('./lib/plugins');\nvar utils = require('./lib/utils');\n\n/**\n * Create an `assemble` app. This is the main function exported\n * by the assemble module.\n *\n * ```js\n * var assemble = require('assemble');\n * var app = assemble();\n * ```\n * @param {Object} `options` Optionally pass default options to use.\n * @api public\n */\n\nfunction Assemble(options) {\n  if (!(this instanceof Assemble)) {\n    return new Assemble(options);\n  }\n  Core.call(this, options);\n  this.is('assemble');\n  this.initAssemble();\n}\n\n/**\n * Inherit `Core`\n */\n\nCore.extend(Assemble);\nCore.bubble(Assemble);\n\n/**\n * Initialize assemble and emit pre and post init events\n */\n\nAssemble.prototype.initAssemble = function() {\n  Assemble.emit('assemble.preInit', this);\n  Assemble.initAssemble(this);\n  Assemble.emit('assemble.postInit', this);\n};\n\n/**\n * Initialize Assemble defaults, plugins and views\n */\n\nAssemble.initAssemble = function(app) {\n  Assemble.initDefaults(app);\n  Assemble.initPlugins(app);\n  Assemble.initViews(app);\n};\n\n/**\n * Initialize defaults\n */\n\nAssemble.initDefaults = function(app) {\n  var exts = app.options.exts || ['md', 'hbs', 'html'];\n\n  /**\n   * Default engine\n   */\n\n  app.engine(exts, require('engine-handlebars'));\n\n  /**\n   * Middleware for parsing front matter\n   */\n\n  app.onLoad(utils.extRegex(exts), function(view, next) {\n    // check options inside the middleware to account for options defined after init\n    if (view.options.frontMatter === false) {\n      next();\n      return;\n    }\n    if (app.options.frontMatter === false) {\n      next();\n      return;\n    }\n    utils.matter.parse(view, next);\n  });\n};\n\n/**\n * Load default plugins. Built-in plugins can be disabled\n * on the `assemble` options.\n *\n * ```js\n * var app = assemble({\n *   plugins: {\n *     loader: false,\n *     store: false\n *   }\n * });\n * ```\n */\n\nAssemble.initPlugins = function(app) {\n  enable('logger', plugins.logger);\n  enable('loader', plugins.loader);\n  enable('config', plugins.config);\n  enable('argv', plugins.argv);\n  enable('cli', plugins.cli);\n\n  function enable(name, fn) {\n    if (app.option('plugins') === false) return;\n    if (app.option('plugins.' + name) !== false) {\n      app.use(fn());\n    }\n  }\n};\n\n/**\n * Built-in view collections\n *  | partials\n *  | layouts\n *  | pages\n */\n\nAssemble.initViews = function(app) {\n  if (app.isFalse('collections')) return;\n\n  app.create('partials', {\n    engine: app.options.engine || 'hbs',\n    viewType: 'partial',\n    renameKey: function(fp) {\n      return path.basename(fp, path.extname(fp));\n    }\n  });\n\n  app.create('layouts', {\n    engine: app.options.engine || 'hbs',\n    viewType: 'layout',\n    renameKey: function(fp) {\n      return path.basename(fp, path.extname(fp));\n    }\n  });\n\n  app.create('pages', {\n    engine: app.options.engine || 'hbs'\n  });\n};\n\n/**\n * Expose the `Assemble` constructor\n */\n\nmodule.exports = Assemble;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-core/index.js":"'use strict';\n\n/**\n * module dependencies\n */\n\nvar Templates = require('templates');\nvar utils = require('./utils');\n\n/**\n * Create an `assemble` application. This is the main function exported\n * by the assemble module.\n *\n * ```js\n * var assemble = require('assemble');\n * var app = assemble();\n * ```\n * @param {Object} `options` Optionally pass default options to use.\n * @api public\n */\n\nfunction Assemble(options) {\n  if (!(this instanceof Assemble)) {\n    return new Assemble(options);\n  }\n  Templates.call(this, options);\n  this.is('assemble');\n  this.initCore();\n}\n\n/**\n * Inherit `Templates`\n */\n\nTemplates.extend(Assemble);\nTemplates.bubble(Assemble);\n\n/**\n * Load core plugins\n */\n\nAssemble.prototype.initCore = function() {\n  Assemble.initCore(this);\n};\n\n/**\n * Load core plugins\n */\n\nAssemble.initCore = function(app) {\n  Assemble.emit('preInit', app);\n  Assemble.initPlugins(app);\n  Assemble.emit('init', app);\n};\n\n/**\n * Load core plugins\n */\n\nAssemble.initPlugins = function(app) {\n  app.use(utils.tasks(app.name));\n  app.use(utils.streams());\n  app.use(utils.render());\n  app.use(utils.fs());\n};\n\n/**\n * Expose the `Assemble` constructor\n */\n\nmodule.exports = Assemble;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-core/utils.js":"'use strict';\n\n/**\n * Module dependencies\n */\n\nvar utils = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils;\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('assemble-fs', 'fs');\nrequire('assemble-render-file', 'render');\nrequire('assemble-streams', 'streams');\nrequire('base-task', 'tasks');\nrequire('define-property', 'define');\nrequire = fn;\n\n/**\n * Expose `utils` modules\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-fs/index.js":"/*!\n * assemble-fs <https://github.com/assemble/assemble-fs>\n *\n * Copyright (c) 2015, 2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar utils = require('./utils');\n\n/**\n * Plugin is registered on `app` and `collection` instances\n */\n\nmodule.exports = function() {\n  return function() {\n    if (!this.isApp) return;\n    plugin.call(this, this);\n\n    return function() {\n      if (!this.isCollection) return;\n      plugin.call(this, this);\n    };\n  };\n};\n\n/**\n * The actual `fs` plugin\n */\n\nfunction plugin(app) {\n  if (!utils.isValidApp(app, 'assemble-fs', ['app', 'views', 'collection'])) return;\n\n  /**\n   * Setup middleware handlers. Assume none of the handlers exist if `onStream`\n   * does not exist.\n   */\n\n  if (typeof app.handler === 'function' && typeof app.onStream !== 'function') {\n    app.handler('onStream');\n    app.handler('preWrite');\n    app.handler('postWrite');\n    app.handler('onLoad');\n  }\n\n  /**\n   * Copy files with the given glob `patterns` to the specified `dest`.\n   *\n   * ```js\n   * app.task('assets', function(cb) {\n   *   app.copy('assets/**', 'dist/')\n   *     .on('error', cb)\n   *     .on('finish', cb)\n   * });\n   * ```\n   * @name .copy\n   * @param {String|Array} `patterns` Glob patterns of files to copy.\n   * @param  {String|Function} `dest` Desination directory.\n   * @return {Stream} Stream, to continue processing if necessary.\n   * @api public\n   */\n\n  this.define('copy', function(patterns, dest, options) {\n    var opts = utils.extend({ allowEmpty: true }, options);\n    return utils.vfs.src(patterns, opts)\n      .pipe(utils.vfs.dest(dest, opts));\n  });\n\n  /**\n   * Glob patterns or filepaths to source files.\n   *\n   * ```js\n   * app.src('src/*.hbs', {layout: 'default'});\n   * ```\n   * @name .src\n   * @param {String|Array} `glob` Glob patterns or file paths to source files.\n   * @param {Object} `options` Options or locals to merge into the context and/or pass to `src` plugins\n   * @api public\n   */\n\n  this.define('src', function(glob, options) {\n    var opts = utils.extend({ allowEmpty: true }, options);\n    return utils.vfs.src(glob, opts)\n      .pipe(toCollection(this, opts))\n      .pipe(utils.handle.once(this, 'onLoad'))\n      .pipe(utils.handle.once(this, 'onStream'));\n  });\n\n  /**\n   * Glob patterns or paths for symlinks.\n   *\n   * ```js\n   * app.symlink('src/**');\n   * ```\n   * @name .symlink\n   * @param {String|Array} `glob`\n   * @api public\n   */\n\n  this.define('symlink', function() {\n    return utils.vfs.symlink.apply(utils.vfs, arguments);\n  });\n\n  /**\n   * Specify a destination for processed files.\n   *\n   * ```js\n   * app.dest('dist/');\n   * ```\n   * @name .dest\n   * @param {String|Function} `dest` File path or rename function.\n   * @param {Object} `options` Options and locals to pass to `dest` plugins\n   * @api public\n   */\n\n  this.define('dest', function fn(dest, options) {\n    if (!dest) {\n      throw new TypeError('expected dest to be a string or function.');\n    }\n\n    // ensure \"dest\" is added to the context before rendering\n    utils.prepareDest(app, dest, options);\n\n    var output = utils.combine([\n      utils.handle.once(this, 'preWrite'),\n      utils.vfs.dest.apply(utils.vfs, arguments),\n      utils.handle.once(this, 'postWrite')\n    ]);\n\n    output.on('end', function() {\n      output.emit('finish');\n      app.emit('end');\n    });\n\n    return output;\n  });\n}\n\n/**\n * Push vinyl files onto a collection or list.\n */\n\nfunction toCollection(app, options) {\n  var opts = utils.extend({collection: 'streamFiles'}, options);\n  var name = opts.collection;\n  var collection;\n\n  if (app.isApp) {\n    collection = app[name] || app.create(name, options);\n  }\n\n  return utils.through.obj(function(file, enc, next) {\n    if (file.isNull()) {\n      next(null, file);\n      return;\n    }\n\n    if (utils.isBinary(file)) {\n      next(null, file);\n      return;\n    }\n\n    // disable default `onLoad` handling inside templates\n    file.options = utils.extend({ onLoad: false }, options, file.options);\n\n    if (app.isApp) {\n      file = collection.addView(file.path, file);\n    } else if (app.isCollection || app.isViews) {\n      file = app.addView(file.path, file);\n    } else if (app.isList) {\n      file = app.setItem(file.path, file);\n    } else {\n      next(new Error('assemble-fs expects an instance, collection or view'));\n      return;\n    }\n\n    next(null, file);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-fs/utils.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils;\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('assemble-handle', 'handle');\nrequire('extend-shallow', 'extend');\nrequire('fs-exists-sync', 'exists');\nrequire('file-is-binary', 'isBinary');\nrequire('is-valid-app');\nrequire('stream-combiner', 'combine');\nrequire('through2', 'through');\nrequire('vinyl-fs', 'vfs');\nrequire = fn;\n\n/**\n * This function does all of the path-specific operations that\n * `prepareWrite` does in http://github.com/wearefractal/vinyl-fs,\n * but on a **cloned file**, which accomplishes two things:\n *\n * 1. We can merge the dest path information onto the context so\n * that it can be used to calculate relative paths for navigation,\n * pagination, etc.\n * 2. Since we use a cloned file, we're not risking any double-processing\n * on the actual view when it's finally written to the file system\n * by the `.dest()` method.\n *\n * @param {Object} view\n * @param {String|Function} dest\n * @param {Object} options\n */\n\nutils.prepare = function(view, dest, options) {\n  var file = view.clone();\n  var opts = utils.extend({cwd: process.cwd()}, options);\n  var cwd = path.resolve(opts.cwd);\n\n  var destDir = typeof dest === 'function' ? dest(file) : dest;\n  if (typeof destDir !== 'string') {\n    throw new TypeError('expected destination directory to be a string');\n  }\n\n  var baseDir = typeof opts.base === 'function'\n    ? opts.base(file)\n    : path.resolve(cwd, destDir);\n\n  if (typeof baseDir !== 'string') {\n    throw new TypeError('expected base directory to be a string');\n  }\n\n  var writePath = path.resolve(baseDir, file.relative);\n  var data = {};\n\n  data.cwd = cwd;\n  data.base = baseDir;\n  data.dest = destDir;\n  data.path = writePath;\n  return data;\n};\n\n/**\n * This sets up an event listener that will eventually\n * be called by `app.renderFile()`, ensuring that `dest`\n * information is loaded onto the context before rendering,\n * so that views can render relative paths.\n */\n\nutils.prepareDest = function _(app, dest, options) {\n  app.emit('dest', dest, options);\n\n  var appOpts = utils.extend({}, this.options);\n  delete appOpts.tasks;\n  delete appOpts.engine;\n\n  var opts = utils.extend({}, appOpts, options);\n  if (_.prepare) {\n    app.off('_prepare', _.prepare);\n  }\n\n  _.prepare = function(view) {\n    var data = utils.prepare(view, dest, opts);\n    view.data = utils.extend({}, view.data, data);\n  };\n\n  app.on('_prepare', _.prepare);\n};\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-handle/index.js":"/*!\n * assemble-handle <https://github.com/jonschlinkert/assemble-handle>\n *\n * Copyright (c) 2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar through = require('through2');\n\n/**\n * Plugin for handling middleware\n *\n * @param {Object} `app` Instance of \"app\" (assemble, verb, etc) or a collection\n * @param {String} `stage` the middleware stage to run\n */\n\nmodule.exports = function handle(app, stage) {\n  return through.obj(function(file, enc, next) {\n    if (typeof app.handle !== 'function') {\n      next(null, file);\n      return;\n    }\n\n    if (typeof file.options === 'undefined') {\n      file.options = {};\n    }\n\n    if (file.isNull()) {\n      next(null, file);\n      return;\n    }\n    app.handle(stage, file, next);\n  });\n};\n\nmodule.exports.once = function handleOnce(app, stage) {\n  return through.obj(function(file, enc, next) {\n    if (typeof app.handle !== 'function') {\n      next(null, file);\n      return;\n    }\n\n    if (typeof file.options === 'undefined') {\n      file.options = {};\n    }\n\n    if (file.isNull()) {\n      next(null, file);\n      return;\n    }\n    app.handleOnce(stage, file, next);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-render-file/index.js":"/*!\n * assemble-render-file <https://github.com/assemble/assemble-render-file>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar PluginError = require('plugin-error');\nvar utils = require('./utils');\n\n/**\n * Render a vinyl file.\n *\n * ```js\n * app.src('*.hbs')\n *   .pipe(app.renderFile());\n * ```\n *\n * @name .renderFile\n * @param  {Object} `locals` Optional locals to pass to the template engine for rendering.\n * @return {Object}\n * @api public\n */\n\nmodule.exports = function(config) {\n  return function plugin(app) {\n    if (!utils.isValid(app, 'assemble-render-file', ['app', 'collection'])) return;\n    var opts = utils.merge({}, app.options, config);\n    var debug = utils.debug;\n\n    app.define('renderFile', function(engine, locals) {\n      if (typeof engine !== 'string') {\n        locals = engine;\n        engine = null;\n      }\n\n      debug('renderFile: engine \"%s\"', engine);\n\n      locals = locals || {};\n      var collection = {};\n\n      if (locals && !locals.isCollection) {\n        opts = utils.merge({}, opts, locals);\n      } else {\n        collection = locals;\n        locals = {};\n      }\n\n      var View = opts.View || opts.File || collection.View || this.View;\n      var files = [];\n\n      return utils.through.obj(function(file, enc, next) {\n        var stream = this;\n\n        if (file.isNull()) {\n          next(null, file);\n          return;\n        }\n\n        if (utils.isBinary(file)) {\n          next(null, file);\n          return;\n        }\n\n        if (file.data.render === false || opts.render === false) {\n          next(null, file);\n          return;\n        }\n\n        if (!file.isView) file = new View(file);\n        files.push(file);\n\n        app.handleOnce('onLoad', file, function(err) {\n          if (err) {\n            handleError(app, err, file, files, next);\n            return;\n          }\n\n          app.emit('_prepare', file);\n          next();\n        });\n\n      }, function(cb) {\n        var stream = this;\n\n        // run `onLoad` middleware\n        utils.reduce(files, [], function(acc, file, next) {\n          debug('renderFile, preRender: %s', file.path);\n\n          resolveEngine(app, locals, engine);\n\n          if (!locals.engine && app.isFalse('engineStrict')) {\n            stream.push(file);\n            next();\n            return;\n          }\n\n          // render the file\n          app.render(file, locals, function(err, res) {\n            if (typeof res === 'undefined' || err) {\n              handleError(app, err, file, files, next);\n              return;\n            }\n\n            debug('renderFile, postRender: %s', file.relative);\n            stream.push(res);\n            next();\n          });\n        }, cb);\n      });\n    });\n\n    return plugin;\n  };\n};\n\nfunction handleError(app, err, view, files, next) {\n  var last = files[files.length - 1];\n  var errOpts = {fileName: last.path, showStack: true};\n  if (!err || !err.message) {\n    err = 'view cannot be rendered';\n  }\n  err = new PluginError('assemble-render-file', err, errOpts);\n  err.files = files;\n  err.view = last;\n  next(err);\n}\n\nfunction resolveEngine(app, locals, engine) {\n  if (typeof engine === 'string') {\n    locals.engine = engine;\n    return;\n  }\n  if (locals.engine) {\n    return;\n  }\n  // allow a `noop` engine to be defined\n  if (app.engines['.noop']) {\n    locals.engine = '.noop';\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-render-file/utils.js":"'use strict';\n\nvar utils = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils;\n\n/**\n * Utils\n */\n\nrequire('async-array-reduce', 'reduce');\nrequire('file-is-binary', 'isBinary');\nrequire('is-valid-app', 'isValid');\nrequire('mixin-deep', 'merge');\nrequire('through2', 'through');\nrequire = fn;\n\nutils.debug = require('debug')('base:assemble:render-file');\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-streams/index.js":"/*!\n * assemble-streams <https://github.com/assemble/assemble-streams>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar utils = require('./utils');\n\nmodule.exports = function(options) {\n  return function plugin(app) {\n    if (utils.isValid(app, 'assemble-streams')) {\n      app.define('toStream', appStream(app));\n      app.on('view', function(view) {\n        viewPlugin.call(view, view);\n      });\n      return collectionPlugin;\n    }\n\n    function collectionPlugin(collection) {\n      if (utils.isValid(collection, 'assemble-streams', ['collection'])) {\n        collection.define('toStream', collectionStream(app, this));\n      }\n      return viewPlugin;\n    }\n\n    function viewPlugin(view) {\n      if (utils.isValid(this, 'assemble-streams', ['item', 'file'])) {\n        utils.define(this, 'toStream', viewStream(app));\n      }\n    }\n    return plugin;\n  };\n};\n\n/**\n * Push a view collection into a vinyl stream.\n *\n * ```js\n * app.toStream('posts', function(file) {\n *   return file.path !== 'index.hbs';\n * })\n * ```\n * @name app.toStream\n * @param {String} `collection` Name of the collection to push into the stream.\n * @param {Function} Optionally pass a filter function to use for filtering views.\n * @return {Stream}\n * @api public\n */\n\nfunction appStream(app) {\n  if (!hasHandler(app, 'onStream')) {\n    app.handler('onStream');\n  }\n\n  return function(name, filterFn) {\n    var stream = utils.through.obj();\n    stream.setMaxListeners(0);\n\n    if (typeof name === 'undefined') {\n      process.nextTick(stream.end.bind(stream));\n      return utils.src(stream);\n    }\n\n    var write = writeStream(stream);\n    var collection = this[name];\n    var views = collection && collection.views;\n\n    if (!views && typeof name !== 'undefined') {\n      filterFn = name;\n      setImmediate(function() {\n        Object.keys(this.views).forEach(function(key) {\n          views = this.views[key];\n          write(views, filterFn);\n        }, this);\n        stream.end();\n      }.bind(this));\n\n      return outStream(stream, this);\n    }\n\n    setImmediate(function() {\n      write(views, filterFn);\n      stream.end();\n    });\n\n    return outStream(stream, this);\n  };\n}\n\n/**\n * Push a view collection into a vinyl stream.\n *\n * ```js\n * app.posts.toStream(function(file) {\n *   return file.path !== 'index.hbs';\n * })\n * ```\n\n * @name collection.toStream\n * @param {Function} Optionally pass a filter function to use for filtering views.\n * @return {Stream}\n * @api public\n */\n\nfunction collectionStream(collection) {\n  if (!hasHandler(collection, 'onStream')) {\n    collection.handler('onStream');\n  }\n\n  return function(filterFn) {\n    var stream = utils.through.obj();\n    stream.setMaxListeners(0);\n\n    var views = this.views;\n    var write = writeStream(stream);\n\n    setImmediate(function() {\n      write(views, filterFn);\n      stream.end();\n    });\n\n    return outStream(stream, collection);\n  };\n}\n\n/**\n * Push the current view into a vinyl stream.\n *\n * ```js\n * app.pages.getView('a.html').toStream()\n *   .on('data', function(file) {\n *     console.log(file);\n *     //=> <Page \"a.html\" <Buffer 2e 2e 2e>>\n *   });\n * ```\n *\n * @name view.toStream\n * @return {Stream}\n * @api public\n */\n\nfunction viewStream(view) {\n  return function() {\n    var stream = utils.through.obj();\n    stream.setMaxListeners(0);\n    setImmediate(function(item) {\n      stream.write(item);\n      stream.end();\n    }, this);\n    return outStream(stream, view);\n  };\n}\n\nfunction writeStream(stream) {\n  return function(views, filterFn) {\n    for (var key in views) {\n      if (filter(key, views[key], filterFn)) {\n        stream.write(views[key]);\n      }\n    }\n  };\n}\n\nfunction outStream(stream, instance) {\n  return utils.src(stream.pipe(utils.handle.once(instance, 'onStream')));\n}\n\nfunction hasHandler(app, name) {\n  return typeof app.handler === 'function' && typeof app[name] === 'function';\n}\n\nfunction filter(key, view, val) {\n  switch (utils.typeOf(val)) {\n    case 'array':\n      var len = val.length;\n      var idx = -1;\n      while (++idx < len) {\n        var name = val[idx];\n        if (utils.match(name, view)) {\n          return true;\n        }\n      }\n      return false;\n    case 'function':\n      return val(key, view);\n    case 'string':\n      return utils.match(val, view);\n    default: {\n      return true;\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-streams/utils.js":"'use strict';\n\nvar utils = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils;\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('assemble-handle', 'handle');\nrequire('define-property', 'define');\nrequire('is-valid-app', 'isValid');\nrequire('kind-of', 'typeOf');\nrequire('match-file', 'match');\nrequire('src-stream', 'src');\nrequire('through2', 'through');\nrequire = fn;\n\n/**\n * Expose `utils` modules\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/plugins.js":"'use strict';\n\nvar utils = require('./utils');\nvar plugins = require('lazy-cache')(require);\nvar fn = require;\nrequire = plugins;\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('assemble-loader', 'loader');\nrequire('base-argv', 'argv');\nrequire('base-cli-process', 'cli');\nrequire('base-config', 'config');\nrequire('base-runtimes', 'runtimes');\nrequire = fn;\n\n/**\n * Add logging methods\n */\n\nplugins.logger = function(options) {\n  return function() {\n    if (!utils.isValid(this, 'assemble-logger')) return;\n    function logger(prop, color) {\n      color = color || 'dim';\n      return function(msg) {\n        var rest = [].slice.call(arguments, 1);\n        return console.log\n          .bind(console, utils.log.timestamp + (prop ? (' ' + utils.log[prop]) : ''))\n          .apply(console, [utils.log[color](msg)].concat(rest));\n      };\n    };\n\n    Object.defineProperty(this, 'log', {\n      configurable: true,\n      get: function() {\n        function log() {\n          return console.log.apply(console, arguments);\n        }\n        log.path = function(msg) {\n          return logger(null, 'dim').apply(null, arguments);\n        };\n        log.time = function(msg) {\n          return logger(null, 'dim').apply(null, arguments);\n        };\n        log.warn = function(msg) {\n          return logger('warning', 'yellow').apply(null, arguments);\n        };\n        log.success = function() {\n          return logger('success', 'green').apply(null, arguments);\n        };\n\n        log.info = function() {\n          return logger('info', 'cyan').apply(null, arguments);\n        };\n\n        log.error = function() {\n          return logger('error', 'red').apply(null, arguments);\n        };\n        log.__proto__ = utils.log;\n        return log;\n      }\n    });\n  };\n};\n\n/**\n * Expose `plugins`\n */\n\nmodule.exports = plugins;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/utils.js":"'use strict';\n\nvar path = require('path');\nvar utils = module.exports = require('lazy-cache')(require);\nvar fn = require;\nrequire = utils;\n\n/**\n * Lazily required module dependencies\n */\n\nrequire('base-questions', 'questions');\nrequire('cross-spawn', 'spawn');\nrequire('fs-exists-sync', 'exists');\nrequire('global-modules', 'gm');\nrequire('is-valid-app', 'isValid');\nrequire('log-utils', 'log');\nrequire('yargs-parser', 'parse');\nrequire('parser-front-matter', 'matter');\nrequire('resolve-dir');\nrequire = fn;\n\n/**\n * Expose methods from log-utils\n */\n\nutils.colors = utils.log.colors;\n\n/**\n * argv options\n */\n\nutils.opts = {\n  alias: {\n    add: 'a',\n    config: 'c',\n    configfile: 'f',\n    global: 'g',\n    help: 'h',\n    init: 'i',\n    silent: 'S',\n    verbose: 'v',\n    version: 'V',\n    remove: 'r'\n  }\n};\n\n/**\n * Parse args with `yargs-parser`\n */\n\nutils.parseArgs = function(argv) {\n  var obj = utils.parse(argv, utils.opts);\n  if (obj.init) {\n    obj._.push('init');\n    delete obj.init;\n  }\n  if (obj.help) {\n    obj._.push('help');\n    delete obj.help;\n  }\n  return obj;\n};\n\n/**\n * Cast `val` to an array\n */\n\nutils.arrayify = function(val) {\n  return [].concat(val || []);\n};\n\n/**\n * Create a regex for matching file extensions\n */\n\nutils.extRegex = function(exts) {\n  return new RegExp('\\\\.(' + utils.arrayify(exts).join('|') + ')$');\n};\n\n/**\n * Get a home-relative filepath\n */\n\nutils.homeRelative = function(fp) {\n  var dir = path.resolve(utils.resolveDir(fp));\n  var home = path.resolve(utils.resolveDir('~/'));\n  fp = path.relative(home, dir);\n  if (fp.charAt(0) === '/') {\n    fp = fp.slice(1);\n  }\n  return fp;\n};\n\n/**\n * Get formatted cwd path\n */\n\nutils.formatDir = function(cwd) {\n  return utils.colors.yellow('~/' + utils.homeRelative(cwd));\n};\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-loader/index.js":"'use strict';\n\nvar path = require('path');\nvar utils = require('./utils');\n\nfunction loader(patterns, config) {\n  if (utils.isObject(patterns)) {\n    config = patterns;\n    patterns = undefined;\n  }\n\n  return function plugin(app) {\n    if (utils.isRegistered(this, 'assemble-loader')) return;\n\n    // register the plugin on an \"app\"\n    if (utils.isValidInstance(this)) {\n      appLoader(this, config);\n\n      // if patterns are passed to the plugin, load them now\n      if (utils.isValidGlob(patterns)) {\n        this.load(patterns);\n      }\n    }\n\n    // register the plugin on a \"collection\"\n    if (utils.isValidInstance(this, ['collection'])) {\n      collectionLoader(this, config);\n\n      // if patterns are passed to the plugin, load them now\n      if (utils.isValidGlob(patterns)) {\n        this.load(patterns);\n      }\n    }\n\n    return plugin;\n  };\n}\n\n/**\n * Adds a `.load` method to the \"app\" instance for loading views that\n * that don't belong to any particular collection. It just returns the\n * object of views instead of caching them.\n *\n * ```js\n * var loader = require('assemble-loader');\n * var assemble = require('assemble');\n * var app = assemble();\n * app.use(loader());\n *\n * var views = app.load('foo/*.hbs');\n * console.log(views);\n * ```\n * @param {Object} `app` application instance (e.g. assemble, verb, etc)\n * @param {Object} `config` Settings to use when registering the plugin\n * @return {Object} Returns an object of _un-cached_ views, from a glob, string, array of strings, or objects.\n * @api public\n */\n\nfunction appLoader(app, config) {\n  app.define('load', load('view', config));\n  var fn = app.view;\n\n  app.define('view', function() {\n    var view = fn.apply(this, arguments);\n    utils.contents.sync(view);\n    return view;\n  });\n}\n\n/**\n * Collection loaders\n */\n\nfunction collectionLoader(collection, config) {\n  collection._addView = collection.addView.bind(collection);\n  var fn = collection.view;\n\n  collection.define('view', function() {\n    var view = fn.apply(this, arguments);\n    utils.contents.sync(view);\n    return view;\n  });\n\n  /**\n   * Patches the `.addViews` method to support glob patterns.\n   *\n   * @param {Object|String} `key` View name or object.\n   * @param {Object} `value` View options, when key is a string.\n   * @return {Object}\n   */\n\n  collection.define('addView', function(key, value) {\n    return this._addView.apply(this, arguments);\n  });\n\n  /**\n   * Patches the `.addViews` method to support glob patterns.\n   *\n   * @param {Object|String} `key` View name or object.\n   * @param {Object} `value` View options, when key is a string.\n   * @return {Object}\n   */\n\n  collection.define('addViews', function(key, value) {\n    this.load.apply(this, arguments);\n    return this;\n  });\n\n  collection.define('loadView', function(filepath, options) {\n    this.load.apply(this, arguments);\n    return this;\n  });\n\n  collection.define('loadViews', function(patterns, options) {\n    this.load.apply(this, arguments);\n    return this;\n  });\n\n  collection.define('load', function() {\n    return load('_addView', config).apply(this, arguments);\n  });\n}\n\n/**\n * Create options from:\n *   + `config` - settings passed when registering plugin\n *   + `app.options` - options set on the instance\n *   + `options` - options passed when calling a loader method\n */\n\nfunction mergeOptions(app, config, options) {\n  if (utils.isView(options)) options = {};\n  var opts = utils.extend({}, config, app.options, options);\n  opts.cwd = path.resolve(opts.cwd || app.cwd || process.cwd());\n  return opts;\n}\n\n/**\n * Create a `Loader` instance with a `loaderfn` bound\n * to the app or collection instance.\n */\n\nfunction createLoader(options, fn) {\n  var loader = new utils.Loader(options);\n  return function() {\n    if (!this.isApp) loader.cache = this.views;\n    loader.options.loaderFn = fn.bind(this);\n    loader.load.apply(loader, arguments);\n    return loader.cache;\n  };\n}\n\n/**\n * Create a function for loading views using the given\n * `method` on the collection or app.\n */\n\nfunction load(method, config) {\n  return function(patterns, options) {\n    var opts = mergeOptions(this, config, options);\n    var loader = createLoader(opts, this[method]);\n    return loader.apply(this, arguments);\n  };\n}\n\n/**\n * Expose `loader`\n */\n\nmodule.exports = loader;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble-loader/utils.js":"'use strict';\n\nvar utils = require('lazy-cache')(require);\n\n/**\n * Lazily required module dependencies\n */\n\nvar fn = require;\nrequire = utils;\nrequire('extend-shallow', 'extend');\nrequire('file-contents', 'contents');\nrequire('is-registered');\nrequire('is-valid-glob');\nrequire('is-valid-instance');\nrequire('isobject', 'isObject');\nrequire('load-templates', 'Loader');\nrequire = fn;\n\n/**\n * Return true if app is a valid instance\n */\n\nutils.isValid = function(app) {\n  if (!utils.isValidInstance(app)) {\n    return false;\n  }\n  if (utils.isRegistered(app, 'assemble-loader')) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Return true if obj is a View instance\n */\n\nutils.isView = function(obj) {\n  return utils.isObject(obj) && (obj.path || obj.contents || obj.isView || obj.isItem);\n};\n\n/**\n * Expose utils\n */\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/bin/cli.js":"#!/usr/bin/env node\n\nvar util = require('util');\nvar path = require('path');\nvar assemble = require('..');\nvar commands = require('../lib/commands');\nvar plugins = require('../lib/plugins');\nvar utils = require('../lib/utils');\nvar errors = require('./errors');\nvar argv = utils.parseArgs(process.argv.slice(2));\n\nfunction run(cb) {\n  var cwd = process.cwd();\n  var app;\n\n  /**\n   * Set the working directory\n   */\n\n  if (argv.cwd && cwd !== path.resolve(argv.cwd)) {\n    process.ORIG_CWD = process.cwd();\n    process.chdir(argv.cwd);\n    cwd = process.cwd();\n  }\n\n  /**\n   * Log the working directory\n   */\n\n  console.log(utils.log.timestamp, 'using cwd ' + utils.formatDir(cwd));\n\n  /**\n   * Get the assemblefile.js to use\n   */\n\n  var assemblefile = path.resolve(cwd, argv.file || 'assemblefile.js');\n\n  /**\n   * Get the `assemble` instance to use\n   */\n\n  var defaults = require('../lib/generator');\n  var configfile = utils.exists(assemblefile);\n  if (configfile) {\n    app = require(assemblefile);\n  } else {\n    app = defaults;\n  }\n\n  /**\n   * If `app` is a function, it's an assemble \"generator\",\n   * so we need to invoke it with an instance of assemble\n   */\n\n  if (typeof app === 'function') {\n    var fn = app;\n    app = assemble(argv);\n    app.option(argv);\n    app.use(fn);\n  } else if (Object.keys(app).length === 0) {\n    var msg = util.format(errors['instance'], utils.homeRelative(assemblefile));\n    cb(new Error(msg));\n    return;\n  }\n\n  assemble.initPlugins(app);\n\n  /**\n   * Listen for errors\n   */\n\n  app.on('error', handleError);\n  app.on('build', function(event, build) {\n    if (typeof event === 'string' && !build.isSilent) {\n      app.log.time(event, build.key, app.log.magenta(build.time));\n    }\n  });\n  app.on('task', function(event, task) {\n    if (typeof event === 'string' && !task.isSilent) {\n      app.log.time(event, task.key);\n    }\n  });\n\n  /**\n   * Support `--emit` for debugging\n   *\n   * Example:\n   *   $ --emit data\n   */\n\n  if (argv.emit && typeof argv.emit === 'string') {\n    app.on(argv.emit, app.log.bind(console));\n  }\n\n  /**\n   * Process command line arguments\n   */\n\n  var tasks = argv._.length ? argv._ : ['default'];\n  var args = app.argv(argv);\n  args.tasks = tasks;\n\n  app.set('cache.argv', args);\n  app.option(args);\n\n  /**\n   * Show path to assemblefile\n   */\n\n  if (configfile) {\n    var fp = utils.homeRelative(assemblefile);\n    app.log.path('using assemblefile ' + utils.colors.green('~/' + fp));\n  }\n\n  /**\n   * Registert `runtimes` plugin\n   */\n\n  app.use(plugins.runtimes());\n\n  /**\n   * Process command line arguments\n   */\n\n  cb(null, app);\n}\n\n/**\n * Run\n */\n\nrun(function(err, app) {\n  if (err) handleError(err);\n  commands(app);\n\n  /**\n   * Process command line arguments\n   */\n\n  app.cli.process(app.get('cache.argv'), function(err) {\n    if (err) handleError(err);\n\n    /**\n     * Run tasks\n     */\n\n    var tasks = app.get('cache.argv.tasks');\n    app.build(tasks, function(err) {\n      if (err) handleError(err);\n      app.log.success('finished');\n    });\n  });\n});\n\n/**\n * Handle CLI errors\n */\n\nfunction handleError(err) {\n  if (typeof err === 'string' && errors[err]) {\n    console.error(errors[err]);\n  } else {\n    if (argv.verbose) {\n      console.error(err.stack);\n    } else {\n      console.error(err.message);\n    }\n  }\n  process.exit(1);\n}\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/commands.js":"'use strict';\n\nvar commands = require('./commands/');\n\nmodule.exports = function(app, options) {\n  for (var key in commands) {\n    if (commands.hasOwnProperty(key)) {\n      app.cli.map(key, commands[key](app, options));\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/commands/index.js":"module.exports = require('export-files')(__dirname);\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/commands/silent.js":"'use strict';\n\nmodule.exports = function(app) {\n  return function(val, key, config, next) {\n    app.enable('silent');\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/commands/version.js":"'use strict';\n\nvar pkg = require('../../package');\n\nmodule.exports = function(app) {\n  return function(val, key, config, next) {\n    console.log(app.log.cyan(`assemble v${pkg.version}`));\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/bin/errors.js":"'use strict';\n\nmodule.exports = {\n  assemblefile: 'Cannot find assemblefile.js in the current working directory. Use \"--cwd\" to specify a working directory.',\n  instance: 'a function or instance must be exported from \"%s\". See \"docs/assemblefile.md\" for details'\n};\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/generator.js":"'use strict';\n\nvar utils = require('./utils');\n\nmodule.exports = function(app) {\n\n  // use `base-questions` plugin for user prompts\n  app.use(utils.questions());\n\n  /**\n   * Listend for `done` event\n   */\n\n  app.on('done', function() {\n    app.log.success('done');\n    process.exit();\n  });\n\n  /**\n   * Generate an `assemblefile.js`\n   */\n\n  app.task('init', function(cb) {\n    app.confirm('init', 'Welcome to assemble! Want to create an assemblefile.js?');\n    app.ask('init', {save: false}, function(err, answers) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      if (!answers.init) {\n        app.log.time('Got it, we\\'re all finished here. Run `assemble` to lean the next step.');\n        app.emit('done');\n        return;\n      }\n      app.build(['new', 'prompt-install'], cb);\n    });\n  });\n\n  /**\n   * Generate an `assemblefile.js`\n   */\n\n  app.task('new', function(cb) {\n    app.src('templates/assemblefile.js', {cwd: __dirname})\n      .pipe(app.dest(process.cwd()))\n      .on('end', function() {\n        app.log.success('created assemblefile.js');\n        cb();\n      });\n  });\n\n  /**\n   * Prompt to install assemble\n   */\n\n  app.task('prompt-install', function(cb) {\n    app.confirm('install', 'Want to install assemble to devDependencies now?');\n    app.ask('install', {save: false}, function(err, answers) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      if (!answers.install) {\n        app.log.time('Got it, stopping');\n        app.emit('done');\n        return;\n      }\n      app.log.time('installing assemble');\n      install(['assemble'], cb);\n    });\n  });\n\n  /**\n   * Asks if you want to generate an `assemblefile.js`\n   */\n\n  app.task('prompt-new', function(cb) {\n    app.confirm('file', 'No assemblefile.js found, want to add one?');\n    app.ask('file', {save: false}, function(err, answers) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      if (!answers.file) {\n        app.log.time('Got it, stopping');\n        app.emit('done');\n        return;\n      }\n      app.build(['new', 'prompt-install'], cb);\n    });\n  });\n\n  /**\n   * Display a help menu of available commands and flags.\n   *\n   * ```sh\n   * $ assemble help\n   * ```\n   * @name help\n   * @api public\n   */\n\n  app.task('help', { silent: true }, function(cb) {\n    app.base.cli.process({ help: true }, cb);\n  });\n\n  /**\n   * Default task\n   */\n\n  app.task('default', ['prompt-new']);\n};\n\n/**\n * Install devDependencies\n */\n\nfunction install(args, cb) {\n  args = ['install', '--save-dev'].concat(args);\n  utils.spawn('npm', args, {stdio: 'inherit'})\n    .on('error', cb)\n    .on('close', function(code, err) {\n      cb(err, code);\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-assemble/node_modules/assemble/lib/templates/assemblefile.js":"'use strict';\n\nvar assemble = require('assemble');\nvar app = assemble();\n\napp.task('default', function() {\n  app.pages('templates/*.hbs');\n  return app.toStream('pages')\n    .pipe(app.renderFile())\n    .pipe(app.dest('dist'));\n});\n\nmodule.exports = app;\n"}